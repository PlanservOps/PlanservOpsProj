// <auto-generated />
using System;
using CadastroCliente.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CadastroClientes.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CadastroCliente.Models.ClienteTest", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("clienteid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClienteId"));

                    b.Property<string>("ClienteBairro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clientebairro");

                    b.Property<string>("ClienteContato")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clientecontato");

                    b.Property<string>("ClienteEndereco")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clienteendereco");

                    b.Property<int>("ClienteFuncaoResponsavel")
                        .HasColumnType("integer")
                        .HasColumnName("clientefuncaoresponsavel");

                    b.Property<int>("ClienteFuncoesTerceirizadasId")
                        .HasColumnType("integer")
                        .HasColumnName("clientefuncoesterceirizadas");

                    b.Property<string>("ClientePosto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clienteposto");

                    b.Property<string>("ClienteResponsavel")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("clienteresponsavel");

                    b.HasKey("ClienteId");

                    b.HasIndex("ClienteFuncoesTerceirizadasId");

                    b.ToTable("clientetest");

                    b.HasData(
                        new
                        {
                            ClienteId = 1,
                            ClienteBairro = "Miramar",
                            ClienteContato = "83981295876",
                            ClienteEndereco = "RUA DOMINGOS MOROSO, S/N MIRAMAR EM JOAO PESSOA NO ESTADO DA PB, CEP:58043-170",
                            ClienteFuncaoResponsavel = 1,
                            ClienteFuncoesTerceirizadasId = 1,
                            ClientePosto = "Arvoredo",
                            ClienteResponsavel = "Antônio Henrique"
                        },
                        new
                        {
                            ClienteId = 2,
                            ClienteBairro = "Bessa",
                            ClienteContato = "83981295876",
                            ClienteEndereco = "AVENIDA PRESIDENTE AFONSO PENA, 382, BESSA, EM JOAO PESSOA NO ESTADO DA PB, CEP: 58035-030",
                            ClienteFuncaoResponsavel = 0,
                            ClienteFuncoesTerceirizadasId = 2,
                            ClientePosto = "Imperial Bessa",
                            ClienteResponsavel = "Mariana"
                        });
                });

            modelBuilder.Entity("CadastroCliente.Models.LeadsOperacionais", b =>
                {
                    b.Property<int>("LeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("leadid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LeadId"));

                    b.Property<string>("LeadEmail")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("leademail");

                    b.Property<string>("LeadName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("leadname");

                    b.Property<string>("LeadPassword")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("leadpassword");

                    b.Property<int>("LeadRole")
                        .HasColumnType("integer")
                        .HasColumnName("leadcreateddate");

                    b.HasKey("LeadId");

                    b.ToTable("LeadsOperacionais");

                    b.HasData(
                        new
                        {
                            LeadId = 1,
                            LeadEmail = "",
                            LeadName = "João Silva",
                            LeadPassword = "senha123",
                            LeadRole = 0
                        });
                });

            modelBuilder.Entity("CadastroClientes.Models.FormularioOperacional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("formularioid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvaliacaoIgo")
                        .HasColumnType("integer")
                        .HasColumnName("avaliacaoigo");

                    b.Property<int>("AvaliacaoRobson")
                        .HasColumnType("integer")
                        .HasColumnName("avaliacaorobson");

                    b.Property<int>("ClientePostoId")
                        .HasColumnType("integer")
                        .HasColumnName("clientepostoid");

                    b.Property<int>("ClientesAtendidos")
                        .HasColumnType("integer")
                        .HasColumnName("clientesatendidos");

                    b.Property<DateTime>("DataEnvio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dataenvio");

                    b.Property<int>("GestoresAtendidos")
                        .HasColumnType("integer")
                        .HasColumnName("gestoresatendidos");

                    b.Property<DateTime>("HoraEnvio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("horaenvio");

                    b.Property<string>("ObservacoesGerais")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("observacoesgerais");

                    b.Property<string>("ProblemasIdentificados")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("problemasidentificados");

                    b.Property<int>("ProblemasReportados")
                        .HasColumnType("integer")
                        .HasColumnName("problemasreportados");

                    b.Property<string>("SolucoesApresentadas")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("solucoesapresentadas");

                    b.HasKey("Id");

                    b.HasIndex("ClientePostoId");

                    b.ToTable("formulariooperacional");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvaliacaoIgo = 4,
                            AvaliacaoRobson = 5,
                            ClientePostoId = 1,
                            ClientesAtendidos = 10,
                            DataEnvio = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            GestoresAtendidos = 5,
                            HoraEnvio = new DateTime(2024, 6, 15, 8, 0, 0, 0, DateTimeKind.Utc),
                            ObservacoesGerais = "Serviço de limpeza agendado para amanhã.",
                            ProblemasIdentificados = "Falta de limpeza na área comum",
                            ProblemasReportados = 2,
                            SolucoesApresentadas = "Contratação de serviços de limpeza"
                        });
                });

            modelBuilder.Entity("CadastroClientes.Models.FuncaoTerceirizada", b =>
                {
                    b.Property<int>("FuncaoTerceirizadaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("funcoaterceirizadaid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FuncaoTerceirizadaId"));

                    b.Property<string>("FuncaoTerceirizadaNome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("funcaoTerceirizadaNome");

                    b.HasKey("FuncaoTerceirizadaId");

                    b.ToTable("funcoaterceirizada");

                    b.HasData(
                        new
                        {
                            FuncaoTerceirizadaId = 1,
                            FuncaoTerceirizadaNome = "Agente de Portaria"
                        },
                        new
                        {
                            FuncaoTerceirizadaId = 2,
                            FuncaoTerceirizadaNome = "Auxiliar de Serviços Gerais"
                        },
                        new
                        {
                            FuncaoTerceirizadaId = 3,
                            FuncaoTerceirizadaNome = "Jardineiro"
                        },
                        new
                        {
                            FuncaoTerceirizadaId = 4,
                            FuncaoTerceirizadaNome = "Concierge"
                        });
                });

            modelBuilder.Entity("CadastroClientes.Models.Ocorrencias", b =>
                {
                    b.Property<int>("OcorrenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ocorrenciaid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OcorrenciaId"));

                    b.Property<int>("ClientePostoId")
                        .HasColumnType("integer")
                        .HasColumnName("clientepostoid");

                    b.Property<int>("ClienteResponsavelId")
                        .HasColumnType("integer")
                        .HasColumnName("clienteresponsavelid");

                    b.Property<DateTime>("OcorrenciaData")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ocorrenciadata");

                    b.Property<string>("OcorrenciaDescricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ocorrenciadescricao");

                    b.Property<int>("OcorrenciaStatus")
                        .HasColumnType("integer")
                        .HasColumnName("ocorrenciastatus");

                    b.HasKey("OcorrenciaId");

                    b.HasIndex("ClientePostoId");

                    b.HasIndex("ClienteResponsavelId");

                    b.ToTable("ocorrencias");

                    b.HasData(
                        new
                        {
                            OcorrenciaId = 1,
                            ClientePostoId = 1,
                            ClienteResponsavelId = 1,
                            OcorrenciaData = new DateTime(2024, 6, 15, 8, 0, 0, 0, DateTimeKind.Utc),
                            OcorrenciaDescricao = "Problema de vazamento no banheiro",
                            OcorrenciaStatus = 3
                        },
                        new
                        {
                            OcorrenciaId = 2,
                            ClientePostoId = 2,
                            ClienteResponsavelId = 2,
                            OcorrenciaData = new DateTime(2024, 6, 15, 9, 0, 0, 0, DateTimeKind.Utc),
                            OcorrenciaDescricao = "Falta de energia na área comum",
                            OcorrenciaStatus = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CadastroCliente.Models.ClienteTest", b =>
                {
                    b.HasOne("CadastroClientes.Models.FuncaoTerceirizada", "ClienteFuncoesTerceirizadas")
                        .WithMany()
                        .HasForeignKey("ClienteFuncoesTerceirizadasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClienteFuncoesTerceirizadas");
                });

            modelBuilder.Entity("CadastroClientes.Models.FormularioOperacional", b =>
                {
                    b.HasOne("CadastroCliente.Models.ClienteTest", "ClientePosto")
                        .WithMany()
                        .HasForeignKey("ClientePostoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientePosto");
                });

            modelBuilder.Entity("CadastroClientes.Models.Ocorrencias", b =>
                {
                    b.HasOne("CadastroCliente.Models.ClienteTest", "ClientePosto")
                        .WithMany()
                        .HasForeignKey("ClientePostoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CadastroCliente.Models.ClienteTest", "ClienteResponsavel")
                        .WithMany()
                        .HasForeignKey("ClienteResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientePosto");

                    b.Navigation("ClienteResponsavel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
